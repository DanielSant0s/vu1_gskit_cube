; _____        ____   ___
;   |     \/   ____| |___|
;   |     |   |   \  |   |
;---------------------------------------------------------------
; Copyright 2022, tyra - https://github.com/h4570/tyra
; Licensed under Apache License 2.0
; Sandro Sobczy≈Ñski <sandro.sobczynski@gmail.com>
;
;---------------------------------------------------------------
; Triangle list
; Cull = Standard PS2 way. clipw polys are culled.
; Animation
; Color
;---------------------------------------------------------------

.syntax new
.name DynPipVU1_C
.vu
.init_vf_all
.init_vi_all

#include "programs/shared/vcl_sml.i"
#include "programs/shared/tyra_macros.i"
#include "programs/dynpip_vu1_shared_defines.h"

#define RGBA_STORE_OFFSET   0
#define XYZ2_STORE_OFFSET   1

--enter
--endenter

#vuprog DynPipVU1C

    ResetClipFlags{ }
    LoadTyraStaticData{ gifSetTag }
    MatrixLoad{ mvp, VU1_MVP_MATRIX_ADDR, vi00 }
    LoadTyraSingleColor{ singleColor, singleColorEnabled, VU1_SINGLE_COLOR_ADDR, VU1_OPTIONS_ADDR }
    LoadTyraTags{ lodGifTag, testsTag, VU1_LOD_ADDR, VU1_Z_TESTS_ADDR }
    FixColor{ singleColor }

begin:
    xtop buffer
    LoadTyraPrimTag{ primTag, buffer }

    ilw.w   vertexCount,        0(buffer)
    iaddiu  vertexDataFrom,     buffer,         VU1_DYNPIP_VERT_DATA_ADDR

    iadd    kickAddress,        vertexDataFrom, vertexCount
    iadd    destAddress,        kickAddress,    vertexCount
    iadd    kickAddress,        kickAddress,    vertexCount

    StoreTyraGifTags{ gifSetTag, lodGifTag, primTag, testsTag, destAddress }
    LoadTyraLerpValue{ interp, VU1_OPTIONS_ADDR }
    LoadTyraScaleValue{ scale, buffer }

    ;--- Loop
    iadd vertexCounter, buffer, vertexCount
vertexLoop:

        iadd    vertexDataTo,   vertexDataFrom, vertexCount

        ;--- Vertex 1 - from-to -> lerp
        lq      vertex1From,    (vertexDataFrom)
        lq      vertex1To,      (vertexDataTo)
        Lerp{ vertex1, vertex1From, vertex1To, interp }

        ;--- Vertex 1 - Calculate
        MatrixMultiplyVertex{ vertex1, mvp, vertex1 }
        PerformClipCheck{ vertex1, destAddress, XYZ2_STORE_OFFSET }
        VertexPersCorr{ vertex1, vertex1 }
        ScaleVertexToGSFormat{ scale, vertex1 }

        ;--- Vertex 1 - Store 
        sq      singleColor,    RGBA_STORE_OFFSET(destAddress)
        sq.xyz  vertex1,        XYZ2_STORE_OFFSET(destAddress)

        ; ---------------------------------------

        ;--- Vertex 2 - from-to -> lerp
        lq      vertex2From,    1(vertexDataFrom)
        lq      vertex2To,      1(vertexDataTo)
        Lerp{ vertex2, vertex2From, vertex2To, interp }

        ;--- Vertex 2 - Calculate
        MatrixMultiplyVertex{ vertex2, mvp, vertex2 }
        PerformClipCheck{ vertex2, destAddress, XYZ2_STORE_OFFSET+2 }
        VertexPersCorr{ vertex2, vertex2 }
        ScaleVertexToGSFormat{ scale, vertex2 }

        ;--- Vertex 2 - Store
        sq      singleColor,    RGBA_STORE_OFFSET+2(destAddress)
        sq.xyz  vertex2,        XYZ2_STORE_OFFSET+2(destAddress)

        ; ---------------------------------------

        ;--- Vertex 3 - from-to -> lerp
        lq      vertex3From,    2(vertexDataFrom)
        lq      vertex3To,      2(vertexDataTo)
        Lerp{ vertex3, vertex3From, vertex3To, interp }

        ;--- Vertex 3 - Calculate
        MatrixMultiplyVertex{ vertex3, mvp, vertex3 }
        PerformClipCheck{ vertex3, destAddress, XYZ2_STORE_OFFSET+4 }
        VertexPersCorr{ vertex3, vertex3 }
        ScaleVertexToGSFormat{ scale, vertex3 }

        ;--- Vertex 3 - Store
        sq      singleColor,    RGBA_STORE_OFFSET+4(destAddress)
        sq.xyz  vertex3,        XYZ2_STORE_OFFSET+4(destAddress)

        ;-------------------------------

        iaddiu  vertexDataFrom, vertexDataFrom, 3
        iaddiu  destAddress,    destAddress,    6

        ;--- Fix loop
        iaddi   vertexCounter,  vertexCounter,  -3  ; decrement the loop counter 
        ibne    vertexCounter,  buffer, vertexLoop  ; and repeat if needed

    xgkick kickAddress ; dispatch to the GS rasterizer.

--barrier ; Why the hell I must add barrier AFTER XGKICK? VCL does not adds E bit without it...
--cont

    b   begin

#endvuprog

--exit
--endexit
